enum OrderStatus {
  NEW
  COOKING
  READY_FOR_PICKUP
  PICKED_UP
  COMPLETED
}

type OrderDish @model @auth(rules: [{allow: public}]) {
  id: ID!
  quantity: Int!
  Dishes: Dishes @hasOne
  orderID: ID! @index(name: "byOrder")
}

type Order @model @auth(rules: [{allow: public}]) {
  id: ID!
  userID: ID! @index(name: "byUser")
  Restaurants: Restaurants @hasOne
  total: Float!
  status: OrderStatus
  OrderDishes: [OrderDish] @hasMany(indexName: "byOrder", fields: ["id"])
}

type BasketDis @model @auth(rules: [{allow: public}]) {
  id: ID!
  quantity: Int
  Dishes: Dishes @hasOne
  basketID: ID! @index(name: "byBasket")
}

type Basket @model @auth(rules: [{allow: public}]) {
  id: ID!
  BasketDis: [BasketDis] @hasMany(indexName: "byBasket", fields: ["id"])
  User: User @hasOne
  Restaurants: Restaurants @hasOne
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  address: String!
  lat: Float!
  lng: Float!
  Orders: [Order] @hasMany(indexName: "byUser", fields: ["id"])
}

type Dishes @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  image: String
  description: String
  price: Float!
  restaurantsID: ID! @index(name: "byRestaurants")
}

type Restaurants @model @auth(rules: [{allow: public}]) {
  id: ID!
  image: String!
  name: String!
  deliveryFee: Float!
  minDeliveryTime: Int!
  maxDeliveryTime: Int!
  rating: Float
  address: String!
  lat: Float!
  lng: Float!
  Dishes: [Dishes] @hasMany(indexName: "byRestaurants", fields: ["id"])
}
 